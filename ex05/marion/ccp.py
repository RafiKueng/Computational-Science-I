"""ChebyPoly.py week 5
Program generates the first n Chebyshev polynomials using orthogonality relation (the numerical integraions are done with an open 5Point intergaion method)
"""
__author__ = "Marion Baumgartner (marion.baumgartner@uzh.ch)"
__date__ = "$Date: 18/10/2011 $"
 
from LegendrePoly import ansatz, evalp
from NewtonCotes import fivepoint
from scipy import *
from matplotlib import *
from pylab import *
 
def normalisecheby(P):
    """normalise a polinomial
    @parem P array containig the coefficients of the polynomial
    """
    for j in range(len(P)):
        P/=fivepoint(lambda x:evalp(P,x)**2/((1-x*x)**0.5),-1,1,10)**0.5
    return P
 
def gramsmitdcheby(n):
    """generate n polynumials using the gram-smidt orthonormal method for plynomials
    @param n the amunt of polinomials to be generated
    """
    #P array containig all the polinomial coefficients
    P=ansatz(n)
    for m in range(len(P)):
        for j in range(len(P[m])-1):
        
            print 'indices',m,j
            print P[m]
            print P[j]
            
            for i in range(len(P[j])):
                #compute the i-the Polinomial P[i]: projects the Polinomials P[j<i] orthogonally onto the subspace U generated by P[1], ..., P[i-1].
                #The vector P[i] is then defined as the difference between vP[j<1]
                #The projection guarantees to be orthogonal to all of the vectors in the subspace U.
                tmp = fivepoint(lambda x:evalp(P[m],x)*evalp(P[j],x)/((1-x*x)**0.5),-1,1,10)
                print ' intr at:',m,j,i,'int', tmp, P[j][i]
                print P[m],'\n',P[j]
                P[m][i]-=tmp*P[j][i]
        #normalisation of the polinomial (create orthogonal polynomials)
        #print P[m]
        P[m]=normalisecheby(P[m])
    return P
 
def chebychev(n):
    """ generate the first n chebyshev polinomials using the integral normalisation kriteria of the chebyshev polynomials
    """
    P=gramsmitdcheby(n)
    P[0]=pi**0.5*P[0]
    for i in range(1,len(P)):
        P[i]=(pi/2)**0.5*P[i]
        print P[i]
    return P
 
if __name__ == '__main__':
    Coeffs=chebychev(5)
    x=arange(-1,1,0.01)
    print Coeffs
    for i in range(len(Coeffs)):
        y=[]
        for j in range(len(x)):
            y.append(evalp(Coeffs[i],x[j]))
        plot(x,y)
    show()